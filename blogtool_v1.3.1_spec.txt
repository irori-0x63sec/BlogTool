
==============================
BlogTool v1.2.18 仕様・要件書（投稿処理含む）
==============================

【バージョン】
v1.2.18（2025年4月20日更新）

【目的】
Qiita / Note 向けの軽量Markdown投稿支援ツール。
ユーザーが自由に投稿プラットフォームのプラグインを追加・切替可能な拡張型設計を採用。
投稿・保存・読込をサポートし、GUIは可搬型で軽量構成。

==============================
■ GUI構成
==============================
- メインウィンドウ
  - タイトル：BlogTool v1.2.18
  - サイズ：1000x700px
  - メニューバー：
    - Setting → Preferences（設定ダイアログ）

- 中央部構成：
  - 上部：タイトル（QLineEdit）、タグ（QLineEdit）
  - 中部：QTabWidget（Editor, Analyze）
    - Editorタブ：QMainWindow（Dock構成）
      - Prot（QPlainTextEdit）← Markdown本文入力
      - Preview（QLabel, HTML表示）← markdown2で1秒遅延反映
    - Analyzeタブ：未実装表示
  - 下部：Open / Save / Post ボタン（QPushButton, 右寄せ）

==============================
■ Preferences構成（GUI + 設定ファイル）
==============================
- 保存場所：~/.BlogTool/Config/preferences.ini
- 保存形式：QSettingsによるINI形式
- GUI構成：
  - [✓] ダークモード切替（背景：#2b2b2b、文字：white）
  - [✓] Markdown補完設定（未実装だがUIあり）
- OKボタンで即時GUIに反映

==============================
■ Markdown処理仕様
==============================
- 使用ライブラリ：markdown2
- 入力欄：QPlainTextEdit（Prot）
- 表示欄：QLabel（Preview）
- 処理：1秒間入力が止まったらHTMLに変換して反映
- スタイル：Preview側はRichText、WordWrap有効

==============================
■ Save機能
==============================
- ファイル形式：Markdown（.md）
- 保存内容：
  - 1行目：# タイトル
  - 2行目：<!-- Tags: tag1, tag2 -->
  - 3行目以降：本文（Markdown）
- ダイアログで保存先選択

==============================
■ Open機能
==============================
- 対応形式：Markdown（.md）
- 内容を分割して読み込み：
  - # タイトル → タイトル欄へ
  - <!-- Tags: ... --> → タグ欄へ
  - 残り本文 → エディタへ反映

==============================
■ Post機能（プラグイン制）
==============================
- Postボタン押下時に以下処理：
  - install_src/utils/plugin_loader.py → discover_plugins()
  - 各 plugin.py で `get_publisher()` → `BasePublisher.post()` を呼出

- 実装例：Qiita / Note モックあり（print出力）
- 将来：API接続により本投稿可能予定

==============================
■ プラグイン構造（拡張可能）
==============================
- 各プラットフォームは plugin.py を用意し、BasePublisher を継承
- plugin.py には以下関数が必須：
    def get_publisher() → BasePublisherインスタンスを返す
- install_src/platforms/{platform_name}/plugin.py に設置すれば自動認識

==============================
■ フォルダ構成（主な部分）
==============================
install_src/
├─ main.py                       ... エントリポイント
├─ gui/
│   └─ main_window.py            ... GUIとPreferences処理
├─ platforms/
│   ├─ qiita/plugin.py           ... Qiita投稿モック
│   ├─ note/plugin.py            ... Note投稿モック
│   └─ base/publisher.py         ... BasePublisher抽象クラス
├─ utils/
│   └─ plugin_loader.py          ... プラグイン検出ロジック
├─ config/preferences.ini        ... 設定ファイル（QSettings）
├─ requirements.txt              ... 依存ライブラリ

==============================
